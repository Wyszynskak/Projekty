{
    "contents" : "#' Wskaznik liczby wystapien kandydata w tweetach\n#'\n#' Funkcja \\code{wybory_wsk_tw_liczba_wystapien} zlicza liczbe wystapien kandydata w tweetach.\n#'\n#' @usage\n#' \\code{wybory_wsk_tw_liczba_wystapien(okres,wzor,sciezka_odczyt=getwd())}\n#'\n#' @param okres okres, za ktory jest liczony wskaznik; mozliwosci: \"dzien\", \"tydzien\", \"miesiac\"\n#' @param wzor wzorzec do odczytu plikow odpowiadajacy danemu okresowi; mozliwosci: \"2015-XX-XX\", \"2015-(X|XX)\", \"2015-XX\"\n#' @param sciezka_odczyt sciezka do folderu bazowego z wszystkimi plikami\n#'\n#' @details\n#' Sposob obliczania wskaznika liczby wystapien kandydata w tweetach na Twitterze:\n#'\n#' Dla danego okresu dla kazdego tweeta zlicza, jaki kandydat w nim sie pojawil,\n#' skleja wszystko do ramki danych, a nastepnie sumuje po kolumnach (kandydaci)\n#' liczbe wystapien.\n#'\n#' @return Zwraca wyliczony wskaznik (24 elementowy wektor) dla danego okresu.\n#'\n#' @examples\n#' wybory_wsk_tw_liczba_wystapien(\"dzien\",\"2015-04-14\")\n#' wybory_wsk_tw_liczba_wystapien(\"tydzien\",\"2015-14\")\n#' wybory_wsk_tw_liczba_wystapien(\"miesiac\",\"2015-04\")\n#'\n#' @author Piotr Smuda\n#'\n\nwybory_wsk_tw_liczba_wystapien<-function(okres,wzor,sciezka_odczyt=getwd()){\n\n   #wczytujemy imiona kandydatów i ich tokeny\n   kandydaci<-slownik_fb_kandydaci\n   tokeny<-slownik_google_tokeny\n\n   #zmieniamy scieżkę i sprawdzamy jakie mamy tam pliki\n   if(stri_sub(sciezka_odczyt,-1)!=\"/\"){\n      sciezka_odczyt<-paste0(sciezka_odczyt,\"/\")\n   }\n\n   sciezka_tweety<-paste0(sciezka_odczyt,\"Twitter/tweety/\")\n   pliki_tweety<-list.files(sciezka_tweety,full.names=TRUE)\n\n   #wczytujemy wszystkie tweety z danego okresu do pliku\n   tweety<-wsk_tw_pomocnicza(pliki_tweety,okres,wzor)\n\n   #sprawdzamy po tokenach, ile razy kandydaci pojawili się w tweetach\n   if(length(tweety)>0) { #gdy mamy jakieś tweety\n      wskaznik<-lapply(tweety,stri_count_regex,tokeny)\n      wskaznik<-do.call(rbind,wskaznik)\n      wskaznik<-apply(wskaznik,2,sum)\n   }\n   else { #gdy nie mamy pasujących plików\n         wskaznik<-numeric(length(kandydaci))\n   }\n   names(wskaznik)<-kandydaci\n   return(wskaznik)\n}\n\nwsk_tw_wczytaj_json<-function(plik){\n   #wczytujemy antysłownik dla tweetów\n   antyslownik<-slownik_tw_anty\n\n   #zamieniamy plik .json na ramkę danych\n   sparsowane<-parseTweets(plik,simplify=FALSE,verbose=FALSE)\n\n   #wybieram właściwe tweety (z pominięciem słów z antysłownika, który zawiera\n   #słowa kluczowe związane z polską ligą piłki nożnej\n   wlasciwe<-lapply(sparsowane$text,function(tweet){\n         !stri_detect_regex(tweet,antyslownik)\n      })\n   wlasciwe<-sapply(wlasciwe, function(wektor){\n         all(wektor==TRUE)\n      })\n   wlasciwe<-sparsowane$text[wlasciwe]\n   #zwracam wektor z tweetami\n   return(wlasciwe)\n}\n\nwsk_tw_pomocnicza<-function(pliki,okres,wzor){\n   if(okres==\"dzien\"){\n      #wybieramy pasujący do wzoru plik i go wczytujemy\n      ktory<-which(stri_detect_regex(pliki,wzor))\n      if(length(ktory)>0) {\n         tweety<-wsk_tw_wczytaj_json(pliki[ktory])\n      }\n      else {\n         tweety<-character()\n      }\n      return(tweety)\n   }\n   else if(okres==\"tydzien\"){\n      #zapamietujemy interesujący nas numer tygodnia\n      nr_tyg<-unlist(stri_extract_all_regex(wzor,\"(?<=-).+$\"))\n      #wyciągamy z plików informację, który tydzień opisują\n      daty<-unlist(stri_extract_all_regex(pliki,\"(?<=tweety-).+(?=.json)\"))\n      daty<-as.POSIXlt(daty)\n      tygodnie<-ceiling((daty$yday+4)/7)\n      #wybieramy pasujące do wzoru pliki i je wczytujemy\n      ktore<-which(tygodnie==nr_tyg)\n      if(length(ktore)>0) { #gdy były pasujące, a jak nie to zwracamy character()\n         tweety<-unlist(lapply(pliki[ktore],wsk_tw_wczytaj_json))\n      }\n      else {\n         tweety<-character()\n      }\n      return(tweety)\n   }\n   else if(okres==\"miesiac\"){\n      #wybieramy pasujące do wzoru pliki i je wczytujemy\n      ktore<-which(stri_detect_regex(pliki,wzor))\n      if(length(ktore)>0) { #gdy były pasujące, a jak nie to zwracamy character()\n         tweety<-unlist(lapply(pliki[ktore],wsk_tw_wczytaj_json))\n      }\n      else {\n         tweety<-character()\n      }\n      return(tweety)\n   }\n}",
    "created" : 1430662173631.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2942151365",
    "id" : "8EB153A6",
    "lastKnownWriteTime" : 1430662320,
    "path" : "D:/Dokumenty/studia/8 semestr/R i Big Data/projekt - wybory/pakiet/wyborySmudaWyszynska/R/wybory_wsk_tw_liczba_wystapien.R",
    "project_path" : "R/wybory_wsk_tw_liczba_wystapien.R",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "relative_order" : 6,
    "source_on_save" : false,
    "type" : "r_source"
}